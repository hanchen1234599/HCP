// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basedata.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Proto
{

    /// <summary>Holder for reflection information generated from basedata.proto</summary>
    public static partial class BasedataReflection
    {

        #region Descriptor
        /// <summary>File descriptor for basedata.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static BasedataReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Cg5iYXNlZGF0YS5wcm90bxIFcHJvdG8i7AIKCEJhc2VEYXRhEhUKDW1Jc0Jh",
                  "c2VPYmplY3QYASABKAgSKQoGbVZhbHVlGAIgASgLMhkucHJvdG8uQmFzZURh",
                  "dGEuQmFzZVZhbHVlEisKB21PYmplY3QYAyADKAsyGi5wcm90by5CYXNlRGF0",
                  "YS5PYmplY3RUeXBlGpgBCglCYXNlVmFsdWUSDQoFbVR5cGUYASABKA0SDwoF",
                  "YnZJbnQYAiABKAVIABIRCgdidkZsb2F0GAMgASgCSAASEgoIYnZEb3VibGUY",
                  "BCABKAFIABISCghidlN0cmluZxgFIAEoCUgAEhAKBmJ2Qm9vbBgGIAEoCEgA",
                  "EhAKBmJ2TG9uZxgHIAEoA0gAQgwKCmJhc2Vfb25lb2YaVgoKT2JqZWN0VHlw",
                  "ZRInCgRtS2V5GAEgASgLMhkucHJvdG8uQmFzZURhdGEuQmFzZVZhbHVlEh8K",
                  "Bm1WYWx1ZRgCIAEoCzIPLnByb3RvLkJhc2VEYXRhQh8KDWNvbS5oY3AucHJv",
                  "dG9CDkJhc2VEYXRhUHJvdG9zYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.BaseData), global::Proto.BaseData.Parser, new[]{ "MIsBaseObject", "MValue", "MObject" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Proto.BaseData.Types.BaseValue), global::Proto.BaseData.Types.BaseValue.Parser, new[]{ "MType", "BvInt", "BvFloat", "BvDouble", "BvString", "BvBool", "BvLong" }, new[]{ "BaseOneof" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Proto.BaseData.Types.ObjectType), global::Proto.BaseData.Types.ObjectType.Parser, new[]{ "MKey", "MValue" }, null, null, null)})
          }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class BaseData : pb::IMessage<BaseData>
    {
        private static readonly pb::MessageParser<BaseData> _parser = new pb::MessageParser<BaseData>(() => new BaseData());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BaseData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Proto.BasedataReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BaseData()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BaseData(BaseData other)
            : this()
        {
            mIsBaseObject_ = other.mIsBaseObject_;
            MValue = other.mValue_ != null ? other.MValue.Clone() : null;
            mObject_ = other.mObject_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BaseData Clone()
        {
            return new BaseData(this);
        }

        /// <summary>Field number for the "mIsBaseObject" field.</summary>
        public const int MIsBaseObjectFieldNumber = 1;
        private bool mIsBaseObject_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool MIsBaseObject
        {
            get { return mIsBaseObject_; }
            set
            {
                mIsBaseObject_ = value;
            }
        }

        /// <summary>Field number for the "mValue" field.</summary>
        public const int MValueFieldNumber = 2;
        private global::Proto.BaseData.Types.BaseValue mValue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proto.BaseData.Types.BaseValue MValue
        {
            get { return mValue_; }
            set
            {
                mValue_ = value;
            }
        }

        /// <summary>Field number for the "mObject" field.</summary>
        public const int MObjectFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Proto.BaseData.Types.ObjectType> _repeated_mObject_codec
            = pb::FieldCodec.ForMessage(26, global::Proto.BaseData.Types.ObjectType.Parser);
        private readonly pbc::RepeatedField<global::Proto.BaseData.Types.ObjectType> mObject_ = new pbc::RepeatedField<global::Proto.BaseData.Types.ObjectType>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proto.BaseData.Types.ObjectType> MObject
        {
            get { return mObject_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as BaseData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BaseData other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (MIsBaseObject != other.MIsBaseObject) return false;
            if (!object.Equals(MValue, other.MValue)) return false;
            if (!mObject_.Equals(other.mObject_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (MIsBaseObject != false) hash ^= MIsBaseObject.GetHashCode();
            if (mValue_ != null) hash ^= MValue.GetHashCode();
            hash ^= mObject_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (MIsBaseObject != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(MIsBaseObject);
            }
            if (mValue_ != null)
            {
                output.WriteRawTag(18);
                output.WriteMessage(MValue);
            }
            mObject_.WriteTo(output, _repeated_mObject_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (MIsBaseObject != false)
            {
                size += 1 + 1;
            }
            if (mValue_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(MValue);
            }
            size += mObject_.CalculateSize(_repeated_mObject_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BaseData other)
        {
            if (other == null)
            {
                return;
            }
            if (other.MIsBaseObject != false)
            {
                MIsBaseObject = other.MIsBaseObject;
            }
            if (other.mValue_ != null)
            {
                if (mValue_ == null)
                {
                    mValue_ = new global::Proto.BaseData.Types.BaseValue();
                }
                MValue.MergeFrom(other.MValue);
            }
            mObject_.Add(other.mObject_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            MIsBaseObject = input.ReadBool();
                            break;
                        }
                    case 18:
                        {
                            if (mValue_ == null)
                            {
                                mValue_ = new global::Proto.BaseData.Types.BaseValue();
                            }
                            input.ReadMessage(mValue_);
                            break;
                        }
                    case 26:
                        {
                            mObject_.AddEntriesFrom(input, _repeated_mObject_codec);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the BaseData message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public sealed partial class BaseValue : pb::IMessage<BaseValue>
            {
                private static readonly pb::MessageParser<BaseValue> _parser = new pb::MessageParser<BaseValue>(() => new BaseValue());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<BaseValue> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Proto.BaseData.Descriptor.NestedTypes[0]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BaseValue()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BaseValue(BaseValue other)
                    : this()
                {
                    mType_ = other.mType_;
                    switch (other.BaseOneofCase)
                    {
                        case BaseOneofOneofCase.BvInt:
                            BvInt = other.BvInt;
                            break;
                        case BaseOneofOneofCase.BvFloat:
                            BvFloat = other.BvFloat;
                            break;
                        case BaseOneofOneofCase.BvDouble:
                            BvDouble = other.BvDouble;
                            break;
                        case BaseOneofOneofCase.BvString:
                            BvString = other.BvString;
                            break;
                        case BaseOneofOneofCase.BvBool:
                            BvBool = other.BvBool;
                            break;
                        case BaseOneofOneofCase.BvLong:
                            BvLong = other.BvLong;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BaseValue Clone()
                {
                    return new BaseValue(this);
                }

                /// <summary>Field number for the "mType" field.</summary>
                public const int MTypeFieldNumber = 1;
                private uint mType_;
                /// <summary>
                /// 0 null, 1, int 2, float, 3, double, 4, string, 5, bool 6, long
                /// </summary>
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public uint MType
                {
                    get { return mType_; }
                    set
                    {
                        mType_ = value;
                    }
                }

                /// <summary>Field number for the "bvInt" field.</summary>
                public const int BvIntFieldNumber = 2;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int BvInt
                {
                    get { return baseOneofCase_ == BaseOneofOneofCase.BvInt ? (int)baseOneof_ : 0; }
                    set
                    {
                        baseOneof_ = value;
                        baseOneofCase_ = BaseOneofOneofCase.BvInt;
                    }
                }

                /// <summary>Field number for the "bvFloat" field.</summary>
                public const int BvFloatFieldNumber = 3;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public float BvFloat
                {
                    get { return baseOneofCase_ == BaseOneofOneofCase.BvFloat ? (float)baseOneof_ : 0F; }
                    set
                    {
                        baseOneof_ = value;
                        baseOneofCase_ = BaseOneofOneofCase.BvFloat;
                    }
                }

                /// <summary>Field number for the "bvDouble" field.</summary>
                public const int BvDoubleFieldNumber = 4;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public double BvDouble
                {
                    get { return baseOneofCase_ == BaseOneofOneofCase.BvDouble ? (double)baseOneof_ : 0D; }
                    set
                    {
                        baseOneof_ = value;
                        baseOneofCase_ = BaseOneofOneofCase.BvDouble;
                    }
                }

                /// <summary>Field number for the "bvString" field.</summary>
                public const int BvStringFieldNumber = 5;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public string BvString
                {
                    get { return baseOneofCase_ == BaseOneofOneofCase.BvString ? (string)baseOneof_ : ""; }
                    set
                    {
                        baseOneof_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                        baseOneofCase_ = BaseOneofOneofCase.BvString;
                    }
                }

                /// <summary>Field number for the "bvBool" field.</summary>
                public const int BvBoolFieldNumber = 6;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool BvBool
                {
                    get { return baseOneofCase_ == BaseOneofOneofCase.BvBool ? (bool)baseOneof_ : false; }
                    set
                    {
                        baseOneof_ = value;
                        baseOneofCase_ = BaseOneofOneofCase.BvBool;
                    }
                }

                /// <summary>Field number for the "bvLong" field.</summary>
                public const int BvLongFieldNumber = 7;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public long BvLong
                {
                    get { return baseOneofCase_ == BaseOneofOneofCase.BvLong ? (long)baseOneof_ : 0L; }
                    set
                    {
                        baseOneof_ = value;
                        baseOneofCase_ = BaseOneofOneofCase.BvLong;
                    }
                }

                private object baseOneof_;
                /// <summary>Enum of possible cases for the "base_oneof" oneof.</summary>
                public enum BaseOneofOneofCase
                {
                    None = 0,
                    BvInt = 2,
                    BvFloat = 3,
                    BvDouble = 4,
                    BvString = 5,
                    BvBool = 6,
                    BvLong = 7,
                }
                private BaseOneofOneofCase baseOneofCase_ = BaseOneofOneofCase.None;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public BaseOneofOneofCase BaseOneofCase
                {
                    get { return baseOneofCase_; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void ClearBaseOneof()
                {
                    baseOneofCase_ = BaseOneofOneofCase.None;
                    baseOneof_ = null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as BaseValue);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(BaseValue other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (MType != other.MType) return false;
                    if (BvInt != other.BvInt) return false;
                    if (BvFloat != other.BvFloat) return false;
                    if (BvDouble != other.BvDouble) return false;
                    if (BvString != other.BvString) return false;
                    if (BvBool != other.BvBool) return false;
                    if (BvLong != other.BvLong) return false;
                    if (BaseOneofCase != other.BaseOneofCase) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (MType != 0) hash ^= MType.GetHashCode();
                    if (baseOneofCase_ == BaseOneofOneofCase.BvInt) hash ^= BvInt.GetHashCode();
                    if (baseOneofCase_ == BaseOneofOneofCase.BvFloat) hash ^= BvFloat.GetHashCode();
                    if (baseOneofCase_ == BaseOneofOneofCase.BvDouble) hash ^= BvDouble.GetHashCode();
                    if (baseOneofCase_ == BaseOneofOneofCase.BvString) hash ^= BvString.GetHashCode();
                    if (baseOneofCase_ == BaseOneofOneofCase.BvBool) hash ^= BvBool.GetHashCode();
                    if (baseOneofCase_ == BaseOneofOneofCase.BvLong) hash ^= BvLong.GetHashCode();
                    hash ^= (int)baseOneofCase_;
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (MType != 0)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt32(MType);
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvInt)
                    {
                        output.WriteRawTag(16);
                        output.WriteInt32(BvInt);
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvFloat)
                    {
                        output.WriteRawTag(29);
                        output.WriteFloat(BvFloat);
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvDouble)
                    {
                        output.WriteRawTag(33);
                        output.WriteDouble(BvDouble);
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvString)
                    {
                        output.WriteRawTag(42);
                        output.WriteString(BvString);
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvBool)
                    {
                        output.WriteRawTag(48);
                        output.WriteBool(BvBool);
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvLong)
                    {
                        output.WriteRawTag(56);
                        output.WriteInt64(BvLong);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (MType != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MType);
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvInt)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BvInt);
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvFloat)
                    {
                        size += 1 + 4;
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvDouble)
                    {
                        size += 1 + 8;
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvString)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(BvString);
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvBool)
                    {
                        size += 1 + 1;
                    }
                    if (baseOneofCase_ == BaseOneofOneofCase.BvLong)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BvLong);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(BaseValue other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.MType != 0)
                    {
                        MType = other.MType;
                    }
                    switch (other.BaseOneofCase)
                    {
                        case BaseOneofOneofCase.BvInt:
                            BvInt = other.BvInt;
                            break;
                        case BaseOneofOneofCase.BvFloat:
                            BvFloat = other.BvFloat;
                            break;
                        case BaseOneofOneofCase.BvDouble:
                            BvDouble = other.BvDouble;
                            break;
                        case BaseOneofOneofCase.BvString:
                            BvString = other.BvString;
                            break;
                        case BaseOneofOneofCase.BvBool:
                            BvBool = other.BvBool;
                            break;
                        case BaseOneofOneofCase.BvLong:
                            BvLong = other.BvLong;
                            break;
                    }

                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    MType = input.ReadUInt32();
                                    break;
                                }
                            case 16:
                                {
                                    BvInt = input.ReadInt32();
                                    break;
                                }
                            case 29:
                                {
                                    BvFloat = input.ReadFloat();
                                    break;
                                }
                            case 33:
                                {
                                    BvDouble = input.ReadDouble();
                                    break;
                                }
                            case 42:
                                {
                                    BvString = input.ReadString();
                                    break;
                                }
                            case 48:
                                {
                                    BvBool = input.ReadBool();
                                    break;
                                }
                            case 56:
                                {
                                    BvLong = input.ReadInt64();
                                    break;
                                }
                        }
                    }
                }

            }

            public sealed partial class ObjectType : pb::IMessage<ObjectType>
            {
                private static readonly pb::MessageParser<ObjectType> _parser = new pb::MessageParser<ObjectType>(() => new ObjectType());
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pb::MessageParser<ObjectType> Parser { get { return _parser; } }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public static pbr::MessageDescriptor Descriptor
                {
                    get { return global::Proto.BaseData.Descriptor.NestedTypes[1]; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ObjectType()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ObjectType(ObjectType other)
                    : this()
                {
                    MKey = other.mKey_ != null ? other.MKey.Clone() : null;
                    MValue = other.mValue_ != null ? other.MValue.Clone() : null;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public ObjectType Clone()
                {
                    return new ObjectType(this);
                }

                /// <summary>Field number for the "mKey" field.</summary>
                public const int MKeyFieldNumber = 1;
                private global::Proto.BaseData.Types.BaseValue mKey_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Proto.BaseData.Types.BaseValue MKey
                {
                    get { return mKey_; }
                    set
                    {
                        mKey_ = value;
                    }
                }

                /// <summary>Field number for the "mValue" field.</summary>
                public const int MValueFieldNumber = 2;
                private global::Proto.BaseData mValue_;
                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public global::Proto.BaseData MValue
                {
                    get { return mValue_; }
                    set
                    {
                        mValue_ = value;
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override bool Equals(object other)
                {
                    return Equals(other as ObjectType);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public bool Equals(ObjectType other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (!object.Equals(MKey, other.MKey)) return false;
                    if (!object.Equals(MValue, other.MValue)) return false;
                    return true;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override int GetHashCode()
                {
                    int hash = 1;
                    if (mKey_ != null) hash ^= MKey.GetHashCode();
                    if (mValue_ != null) hash ^= MValue.GetHashCode();
                    return hash;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (mKey_ != null)
                    {
                        output.WriteRawTag(10);
                        output.WriteMessage(MKey);
                    }
                    if (mValue_ != null)
                    {
                        output.WriteRawTag(18);
                        output.WriteMessage(MValue);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public int CalculateSize()
                {
                    int size = 0;
                    if (mKey_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MKey);
                    }
                    if (mValue_ != null)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MValue);
                    }
                    return size;
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(ObjectType other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.mKey_ != null)
                    {
                        if (mKey_ == null)
                        {
                            mKey_ = new global::Proto.BaseData.Types.BaseValue();
                        }
                        MKey.MergeFrom(other.MKey);
                    }
                    if (other.mValue_ != null)
                    {
                        if (mValue_ == null)
                        {
                            mValue_ = new global::Proto.BaseData();
                        }
                        MValue.MergeFrom(other.MValue);
                    }
                }

                [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    if (mKey_ == null)
                                    {
                                        mKey_ = new global::Proto.BaseData.Types.BaseValue();
                                    }
                                    input.ReadMessage(mKey_);
                                    break;
                                }
                            case 18:
                                {
                                    if (mValue_ == null)
                                    {
                                        mValue_ = new global::Proto.BaseData();
                                    }
                                    input.ReadMessage(mValue_);
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    #endregion

}

#endregion Designer generated code
